server:
  port: 9090
mybatis:
  configuration:
    map-underscore-to-camel-case: true
spring:
  main:
    allow-bean-definition-overriding: true
  application:
    name: sharding-jdbc-learning
  # Sharding-JDBC的配置
  shardingsphere:
    # 配置两个库
    datasource:
      names: ds0,ds1,ds2,ds3,ds4
      ds0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/ds0?useUnicode=true&characterEncoding=utf-8
        username: test
        password: test
      ds1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/ds1?useUnicode=true&characterEncoding=utf-8
        username: test
        password: test
    sharding:
      binding-tables:
        - product_base,product_description
      broadcast-tables:
        - product_type
      default-data-source-name: ds0
      tables:
        # 订单表 复合分片策略
        order:
          logicTable: order
          actualDataNodes: ds1.order_$->{0..9}
          tableStrategy:
            complex:
              shardingColumns: order_id,user_id
              algorithmClassName: com.learning.sharding.OrderTableComplexKeysShardingAlgorithm
        # user 标准分片策略
        t_user:
          logicTable: t_user
          actualDataNodes: ds1.t_user_$->{0..9}
          key-generator:
            column: f_id
            type: SNOWFLAKE
          tableStrategy:
            standard:
              shardingColumn: f_id
              preciseAlgorithmClassName: com.learning.sharding.UserTablePreciseShardingAlgorithm
              rangeAlgorithmClassName: com.learning.sharding.UserTableRangeShardingAlgorithm
        # 商品表/商品详情表 分库分表 2个库各10表
        product_base:
          actual-data-nodes: ds$->{0..1}.product_base_$->{0..9}
          # 分表策略
          tableStrategy:
            inline:
              shardingColumn: shop_id
              algorithmExpression: product_base_$->{shop_id%10}
          # 分库策略
          databaseStrategy:
            inline:
              shardingColumn: product_id
              algorithm‐expression: ds$->{product_id%2}
          key-generator:
            column: product_id
            type: SNOWFLAKE
        product_description:
          actual-data-nodes: ds$->{0..1}.product_description_$->{0..9}
          tableStrategy:
            inline:
              shardingColumn: shop_id
              algorithmExpression: product_description_$->{shop_id%10}
          databaseStrategy:
            inline:
              shardingColumn: product_id
              algorithmExpression: ds$->{product_id%2}
        # shop表在0号库,垂直分库
        shop:
          actual-data-nodes: ds1.shop
          key-generator:
            column: shop_id
            type: SNOWFLAKE
    props:
      sql:
        show: true